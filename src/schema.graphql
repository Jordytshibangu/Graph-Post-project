    # import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'
    type Query {
        users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput):[User!]!
        posts(query: String, first: Int, skip: Int, orderBy: PostOrderByInput) : [Post!]!
        myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput) : [Post!]!
        comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
        me: User!
        post(id : ID!): Post!
         
    }

    type Mutation {
        createUser(data : CreateUserInput!) : AuthPayload!
        createPost(data : CreatePostInput!) : Post!
        createComment(data : createCommentInput!) : Comment!

        deleteUser: User!
        deletePost(id : ID!) : Post!
        deleteComment(id : ID!) : Comment!

        updateUser(data : UpdateUserInput!) : User!
        updatePost(id : ID!, data : UpdatePostInput!) : Post!
        updateComment(id : ID!, data : UpdateCommentInput!) : Comment!

        loginUser(data : loginUserInput!):AuthPayload!

    }

    type AuthPayload {
        token: String!
        user: User!
    }

    type Subscription {
        count: Int!
        comment(postId : ID!) : CommentSubscriptionPayload!
        post: PostSubscriptionPayload!
    }

    input CreateUserInput {
        username: String!
        email: String!
        password: String! 
        
    }
    
    input loginUserInput {
        email: String!
        password: String!
    }

    input CreatePostInput{
        title: String!
        body: String!
        published: Boolean!
    }

    input createCommentInput {
        text: String!
        post: ID!
    }

    input UpdateUserInput {
        username: String
        email: String
        password: String
    }

    input UpdatePostInput{
        title: String
        body: String
        published: Boolean
    }

    input UpdateCommentInput {
        text: String
    }

    type User {
        id: ID!
        username: String
        email: String
        password: String!
        posts: [Post!]!
        comments: [Comment!]!
        updatedAt: String!
        createdAt: String!
    }

    type Post {
        id: ID!
        title: String!
        body: String!
        published: Boolean!
        author: User! 
        comments: [Comment!]!
        updatedAt: String!
        createdAt: String!
    }
   
    type Comment {
        id: ID!
        text: String!
        author: User!
        post: Post!
        updatedAt: String!
        createdAt: String!
    }

    enum MutationType {
        CREATED
        UPDATED
        DELETED
    }

    type PostSubscriptionPayload {
        mutation: MutationType!
        node: Post
    }

    type CommentSubscriptionPayload { 
        mutation: MutationType!
        node: Comment
    }
